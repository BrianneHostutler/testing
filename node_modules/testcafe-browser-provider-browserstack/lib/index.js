'use strict';

exports.__esModule = true;

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _pinkie = require('pinkie');

var _pinkie2 = _interopRequireDefault(_pinkie);

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _desiredCapabilities = require('desired-capabilities');

var _desiredCapabilities2 = _interopRequireDefault(_desiredCapabilities);

var _browserstackLocal = require('browserstack-local');

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

var _osFamily = require('os-family');

var _osFamily2 = _interopRequireDefault(_osFamily);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BUILD_ID = process.env['BROWSERSTACK_BUILD_ID'];
var PROJECT_NAME = process.env['BROWSERSTACK_PROJECT_NAME'];

var TESTS_TIMEOUT = process.env['BROWSERSTACK_TEST_TIMEOUT'] || 1800;
var BROWSERSTACK_CONNECTOR_DELAY = 10000;

var MINIMAL_WORKER_TIME = 30000;
var TESTCAFE_CLOSING_TIMEOUT = 10000;
var TOO_SMALL_TIME_FOR_WAITING = MINIMAL_WORKER_TIME - TESTCAFE_CLOSING_TIMEOUT;

var AUTH_FAILED_ERROR = 'Authentication failed. Please assign the correct username and access key ' + 'to the BROWSERSTACK_USERNAME and BROWSERSTACK_ACCESS_KEY environment variables.';

var PROXY_AUTH_RE = /^([^:]*)(?::(.*))?$/;

var BROWSERSTACK_API_PATHS = {
    browserList: {
        url: 'https://api.browserstack.com/4/browsers?flat=true'
    },

    newWorker: {
        url: 'https://api.browserstack.com/4/worker',
        method: 'POST'
    },

    deleteWorker: function deleteWorker(id) {
        return {
            url: 'https://api.browserstack.com/4/worker/' + id,
            method: 'DELETE'
        };
    },

    screenshot: function screenshot(id) {
        return {
            url: 'https://api.browserstack.com/4/worker/' + id + '/screenshot.png',
            binaryStream: true
        };
    }
};

var identity = function identity(x) {
    return x;
};

var capitalize = function capitalize(str) {
    return str[0].toUpperCase() + str.slice(1);
};

function delay(ms) {
    return new _pinkie2.default(function (resolve) {
        return setTimeout(resolve, ms);
    });
}

function copyOptions(source, destination) {
    var transfromFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : identity;

    (0, _keys2.default)(source).forEach(function (key) {
        return source[key] && (destination[transfromFunc(key)] = source[key]);
    });
}

function getProxyOptions(proxyConfig) {
    try {
        var _nodeUrl$parse = _url2.default.parse('http://' + proxyConfig),
            hostname = _nodeUrl$parse.hostname,
            port = _nodeUrl$parse.port,
            auth = _nodeUrl$parse.auth;

        var parsedAuth = auth && auth.match(PROXY_AUTH_RE);

        return {
            host: hostname === 'undefined' ? null : hostname,
            port: port,
            user: parsedAuth && parsedAuth[1],
            pass: parsedAuth && parsedAuth[2]
        };
    } catch (e) {
        return {};
    }
}

function createBrowserStackConnector(accessKey) {
    return new _pinkie2.default(function (resolve, reject) {
        var connector = new _browserstackLocal.Local();

        var opts = {
            key: accessKey,
            logfile: _osFamily2.default.win ? 'NUL' : '/dev/null',
            forceLocal: !!process.env['BROWSERSTACK_FORCE_LOCAL'],
            forceProxy: !!process.env['BROWSERSTACK_FORCE_PROXY'],
            localIdentifier: Date.now(),

            //NOTE: additional args use different format
            'enable-logging-for-api': true
        };

        var proxyOptions = getProxyOptions(process.env['BROWSERSTACK_PROXY']);
        var localProxyOptions = getProxyOptions(process.env['BROWSERSTACK_LOCAL_PROXY']);

        copyOptions(proxyOptions, opts, function (key) {
            return 'proxy' + capitalize(key);
        });
        copyOptions(localProxyOptions, opts, function (key) {
            return 'local-proxy-' + key;
        });

        connector.start(opts, function (err) {
            if (err) {
                reject(err);
                return;
            }

            setTimeout(function () {
                return resolve(connector);
            }, BROWSERSTACK_CONNECTOR_DELAY);
        });
    });
}

function destroyBrowserStackConnector(connector) {
    return new _pinkie2.default(function (resolve, reject) {
        connector.stop(function (err) {
            if (err) {
                reject(err);
                return;
            }

            resolve(connector);
        });
    });
}

function doRequest(apiPath, params) {
    if (!process.env['BROWSERSTACK_USERNAME'] || !process.env['BROWSERSTACK_ACCESS_KEY']) throw new Error(AUTH_FAILED_ERROR);

    var url = apiPath.url;

    var opts = {
        auth: {
            user: process.env['BROWSERSTACK_USERNAME'],
            pass: process.env['BROWSERSTACK_ACCESS_KEY']
        },

        qs: (0, _assign2.default)({}, BUILD_ID && { build: BUILD_ID }, PROJECT_NAME && { project: PROJECT_NAME }, params),

        method: apiPath.method || 'GET',
        json: !apiPath.binaryStream
    };

    if (apiPath.binaryStream) opts.encoding = null;

    return (0, _requestPromise2.default)(url, opts).catch(function (error) {
        if (error.statusCode === 401) throw new Error(AUTH_FAILED_ERROR);

        throw error;
    });
}

exports.default = {
    // Multiple browsers support
    isMultiBrowser: true,
    connectorPromise: _pinkie2.default.resolve(null),
    workers: {},
    platformsInfo: [],
    browserNames: [],

    _getConnector: function _getConnector() {
        var _this = this;

        this.connectorPromise = this.connectorPromise.then(function () {
            var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(connector) {
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                if (connector) {
                                    _context.next = 4;
                                    break;
                                }

                                _context.next = 3;
                                return createBrowserStackConnector(process.env['BROWSERSTACK_ACCESS_KEY']);

                            case 3:
                                connector = _context.sent;

                            case 4:
                                return _context.abrupt('return', connector);

                            case 5:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, _this);
            }));

            return function (_x2) {
                return _ref.apply(this, arguments);
            };
        }());

        return this.connectorPromise;
    },
    _disposeConnector: function _disposeConnector() {
        var _this2 = this;

        this.connectorPromise = this.connectorPromise.then(function () {
            var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(connector) {
                return _regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                if (!connector) {
                                    _context2.next = 3;
                                    break;
                                }

                                _context2.next = 3;
                                return destroyBrowserStackConnector(connector);

                            case 3:
                                return _context2.abrupt('return', null);

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, _this2);
            }));

            return function (_x3) {
                return _ref2.apply(this, arguments);
            };
        }());

        return this.connectorPromise;
    },
    _getDeviceList: function _getDeviceList() {
        var _this3 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
            return _regenerator2.default.wrap(function _callee3$(_context3) {
                while (1) {
                    switch (_context3.prev = _context3.next) {
                        case 0:
                            _context3.next = 2;
                            return doRequest(BROWSERSTACK_API_PATHS.browserList);

                        case 2:
                            _this3.platformsInfo = _context3.sent;


                            _this3.platformsInfo.reverse();

                        case 4:
                        case 'end':
                            return _context3.stop();
                    }
                }
            }, _callee3, _this3);
        }))();
    },
    _createQuery: function _createQuery(capabilities) {
        var _parseCapabilities$ = (0, _desiredCapabilities2.default)(capabilities)[0],
            browserName = _parseCapabilities$.browserName,
            browserVersion = _parseCapabilities$.browserVersion,
            platform = _parseCapabilities$.platform;


        browserName = browserName.toLowerCase();

        if (browserName === 'internet explorer') browserName = 'ie';

        return {
            name: browserName,
            version: browserVersion.toLowerCase(),
            platform: platform.toLowerCase()
        };
    },
    _generateCapabilities: function _generateCapabilities(browserName) {
        return this._filterPlatformInfo(this._createQuery(browserName))[0];
    },
    _filterPlatformInfo: function _filterPlatformInfo(query) {
        return this.platformsInfo.filter(function (info) {
            var browserNameMatched = info['browser'] && info['browser'].toLowerCase() === query.name;
            var deviceNameMatched = info['device'] && info['device'].toLowerCase() === query.name;

            var browserVersionMatched = info['browser_version'] && Number(info['browser_version']) === Number(query.version);
            var platformVersionMatched = info['os_version'] && Number(info['os_version']) === Number(query.version);
            var platformNameMatched = info['os'].toLowerCase() === query.platform || info['os'].toLowerCase() + ' ' + info['os_version'].toLowerCase() === query.platform;

            var isAnyVersion = query.version === 'any';
            var isAnyPlatform = query.platform === 'any';

            var desktopBrowserMatched = browserNameMatched && (browserVersionMatched || isAnyVersion) && (platformNameMatched || isAnyPlatform);

            var mobileBrowserMatched = deviceNameMatched && (platformVersionMatched || isAnyVersion);

            return desktopBrowserMatched || mobileBrowserMatched;
        });
    },
    _generateBrowserNames: function _generateBrowserNames() {
        this.browserNames = this.platformsInfo.map(function (info) {
            var isDesktop = !info['device'];
            var name = isDesktop ? info['browser'] : info['device'];
            var version = isDesktop ? info['browser_version'] : info['os_version'];
            var platform = isDesktop ? info['os'] + ' ' + info['os_version'] : '';

            return name + '@' + version + (platform ? ':' + platform : '');
        });
    },


    // Required - must be implemented
    // Browser control
    openBrowser: function openBrowser(id, pageUrl, browserName) {
        var _this4 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
            var capabilities, connector;
            return _regenerator2.default.wrap(function _callee4$(_context4) {
                while (1) {
                    switch (_context4.prev = _context4.next) {
                        case 0:
                            capabilities = _this4._generateCapabilities(browserName);
                            _context4.next = 3;
                            return _this4._getConnector();

                        case 3:
                            connector = _context4.sent;


                            capabilities.timeout = TESTS_TIMEOUT;
                            capabilities.url = pageUrl;
                            capabilities.name = 'TestCafe test run ' + id;
                            capabilities.localIdentifier = connector.localIdentifierFlag;
                            capabilities['browserstack.local'] = true;

                            _context4.next = 11;
                            return doRequest(BROWSERSTACK_API_PATHS.newWorker, capabilities);

                        case 11:
                            _this4.workers[id] = _context4.sent;

                            _this4.workers[id].started = Date.now();

                        case 13:
                        case 'end':
                            return _context4.stop();
                    }
                }
            }, _callee4, _this4);
        }))();
    },
    closeBrowser: function closeBrowser(id) {
        var _this5 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
            var workerTime, workerId;
            return _regenerator2.default.wrap(function _callee5$(_context5) {
                while (1) {
                    switch (_context5.prev = _context5.next) {
                        case 0:
                            workerTime = Date.now() - _this5.workers[id].started;
                            workerId = _this5.workers[id].id;

                            if (!(workerTime < MINIMAL_WORKER_TIME)) {
                                _context5.next = 8;
                                break;
                            }

                            if (!(workerTime < TOO_SMALL_TIME_FOR_WAITING)) {
                                _context5.next = 6;
                                break;
                            }

                            _context5.next = 6;
                            return doRequest(BROWSERSTACK_API_PATHS.deleteWorker(workerId));

                        case 6:
                            _context5.next = 8;
                            return delay(MINIMAL_WORKER_TIME - workerTime);

                        case 8:
                            _context5.next = 10;
                            return doRequest(BROWSERSTACK_API_PATHS.deleteWorker(workerId));

                        case 10:
                        case 'end':
                            return _context5.stop();
                    }
                }
            }, _callee5, _this5);
        }))();
    },


    // Optional - implement methods you need, remove other methods
    // Initialization
    init: function init() {
        var _this6 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6() {
            return _regenerator2.default.wrap(function _callee6$(_context6) {
                while (1) {
                    switch (_context6.prev = _context6.next) {
                        case 0:
                            _context6.next = 2;
                            return _this6._getDeviceList();

                        case 2:

                            _this6._generateBrowserNames();

                        case 3:
                        case 'end':
                            return _context6.stop();
                    }
                }
            }, _callee6, _this6);
        }))();
    },
    dispose: function dispose() {
        var _this7 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee7() {
            return _regenerator2.default.wrap(function _callee7$(_context7) {
                while (1) {
                    switch (_context7.prev = _context7.next) {
                        case 0:
                            _context7.next = 2;
                            return _this7._disposeConnector();

                        case 2:
                        case 'end':
                            return _context7.stop();
                    }
                }
            }, _callee7, _this7);
        }))();
    },


    // Browser names handling
    getBrowserList: function getBrowserList() {
        var _this8 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee8() {
            return _regenerator2.default.wrap(function _callee8$(_context8) {
                while (1) {
                    switch (_context8.prev = _context8.next) {
                        case 0:
                            return _context8.abrupt('return', _this8.browserNames);

                        case 1:
                        case 'end':
                            return _context8.stop();
                    }
                }
            }, _callee8, _this8);
        }))();
    },
    isValidBrowserName: function isValidBrowserName(browserName) {
        var _this9 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee9() {
            return _regenerator2.default.wrap(function _callee9$(_context9) {
                while (1) {
                    switch (_context9.prev = _context9.next) {
                        case 0:
                            return _context9.abrupt('return', (0, _desiredCapabilities2.default)(browserName).length === 1 && !!_this9._filterPlatformInfo(_this9._createQuery(browserName)).length);

                        case 1:
                        case 'end':
                            return _context9.stop();
                    }
                }
            }, _callee9, _this9);
        }))();
    },


    // Extra methods
    resizeWindow: function resizeWindow() /* id, width, height, currentWidth, currentHeight */{
        var _this10 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee10() {
            return _regenerator2.default.wrap(function _callee10$(_context10) {
                while (1) {
                    switch (_context10.prev = _context10.next) {
                        case 0:
                            _this10.reportWarning('The window resize functionality is not supported by the "browserstack" browser provider.');

                        case 1:
                        case 'end':
                            return _context10.stop();
                    }
                }
            }, _callee10, _this10);
        }))();
    },
    takeScreenshot: function takeScreenshot(id, screenshotPath) {
        var _this11 = this;

        return (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee12() {
            return _regenerator2.default.wrap(function _callee12$(_context12) {
                while (1) {
                    switch (_context12.prev = _context12.next) {
                        case 0:
                            return _context12.abrupt('return', new _pinkie2.default(function () {
                                var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee11(resolve, reject) {
                                    var buffer;
                                    return _regenerator2.default.wrap(function _callee11$(_context11) {
                                        while (1) {
                                            switch (_context11.prev = _context11.next) {
                                                case 0:
                                                    _context11.next = 2;
                                                    return doRequest(BROWSERSTACK_API_PATHS.screenshot(_this11.workers[id].id));

                                                case 2:
                                                    buffer = _context11.sent;


                                                    _jimp2.default.read(buffer).then(function (image) {
                                                        return image.write(screenshotPath, resolve);
                                                    }).catch(reject);

                                                case 4:
                                                case 'end':
                                                    return _context11.stop();
                                            }
                                        }
                                    }, _callee11, _this11);
                                }));

                                return function (_x4, _x5) {
                                    return _ref3.apply(this, arguments);
                                };
                            }()));

                        case 1:
                        case 'end':
                            return _context12.stop();
                    }
                }
            }, _callee12, _this11);
        }))();
    }
};
module.exports = exports['default'];